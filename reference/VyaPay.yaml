openapi: 3.1.0
info:
  title: VyaPay OpenAPI 3.1
  version: '1.0'
  summary: VyaPay API
  description: This is a good API
  contact:
    name: Technical Support
    url: 'https://vyapay.com'
    email: support@vyapay.com
  license:
    name: MIT
    identifier: MIT
servers:
  - url: 'http://test-api.vyapay.com/v2'
    description: Test (API Gateway)
  - url: 'http://api.vyapay.com/v2'
    description: Production (API Gateway)
  - url: 'http://localhost:3030'
    description: localhost
paths:
  /card/sale/transactions:
    get:
      summary: List Transactions
      description: List Transactions
      tags:
        - VYALYNK
        - TRANSACTIONS
      responses:
        '200':
          description: OK
      operationId: get-vyalynk-transactions
      parameters:
        - name: transaction_id
          in: query
          schema:
            type:
              - string
            example: '827263293809'
          description: Search by host gateway `transaction_id`.  Search for multiple `transaction_id`s by separating values with commas
        - name: start_date
          in: query
          description: Search for transactions processed on or after a particular date. Format date as a `mm/dd/yy`
          schema:
            type: string
            example: 01/01/22
            maxLength: 8
            minLength: 8
        - name: end_date
          in: query
          description: Search for transactions processed on or before a particular date. Format date as a `mm/dd/yy`
          schema:
            type: string
            example: 07/01/22
            maxLength: 8
            minLength: 8
        - name: payment_type
          in: query
          description: |-
            A case-sensitive string to return transactions by specific payment type type.
            * `cc` = Credit Card transactions
            * `ach` = ACH Transactions

            You can return both cc and ach transactions by separating the values with a comma.

            Example: "cc, ach"

            default: cc
          schema:
            type: string
            enum:
              - cc
              - ach
            example: cc
            maxLength: 3
            minLength: 2
            default: cc
        - name: amount
          in: query
          description: Search for a specific transaction amount.  Use a whole number string or number
          schema:
            type:
              - string
              - number
            example: 14.42
        - name: amount_from
          in: query
          description: |-
            Search for transactions equal to or greater than value provided.

            If value provided, the `amount` value will be ignored (if provided)
          schema:
            type:
              - string
              - number
            example: 12
        - name: amount_to
          in: query
          description: |-
            Search for transactions equal to or less than value provided.

            If value provided, the `amount` value will be ignored (if provided)
          schema:
            type:
              - string
              - number
            example: 123.22
        - name: cardholder_name
          in: query
          description: |-
            Search for transactions by cardholder name.

            "Fuzzy search" begins with is available.

            For example, `jen` will return transactions for both `JEN`NY SIMMS and SAMMY `JEN`KINS
          schema:
            type: string
            example: robert
        - name: card_brand
          in: query
          description: |-
            Case sensitive string search for transactions by card brand. Valid values are:

            * visa
            * mastercard
            * amex
            * discover
            * jcb
            * diners

            Return multiple card brands by separating the card brand names with a comma.

            Example: "visa, amex"

            By default the card_brand is ignored.
          schema:
            type: string
            enum:
              - visa
              - mastercard
              - amex
              - discover
              - jcb
              - diners
            example: visa
            minLength: 3
            maxLength: 10
        - name: order_id
          in: query
          description: |-
            Case sensitive string search for transactions by order_id. 

            Return multiple transactions by separating the order_id with a comma.

            Example: "abc-1277645, abc-1387665"

            By default the order_id is ignored.
          schema:
            type: string
            example: oid_234872923
            maxLength: 40
        - name: first_6
          in: query
          description: |-
            Search for transactions matching the first 6 digits of the credit card account number. 

            Return multiple transactions by separating the `first_6` values with a comma.

            Example: "545454, 454847"
          schema:
            type: string
            example: '454847'
            minLength: 6
            maxLength: 6
        - name: last_4
          in: query
          description: |-
            Search for transactions matching the last 4 digits of the credit card account number. 

            Return multiple transactions by separating the `last_4` values with a comma.

            Example: "5454, 4566"
          schema:
            type: string
            example: '4366'
            minLength: 4
            maxLength: 4
        - name: limit
          in: query
          description: 'The number of results to return when viewing a page. See [PAGINATION](#tag/Pagination) for more details.'
          schema:
            type: integer
            example: 40
        - name: offset
          in: query
          description: 'The number of results to skip. See [PAGINATION](#tag/Pagination) for more details.'
          schema:
            type: integer
            example: 20
    post:
      summary: Create Transaction
      operationId: post-card-sale-transactions
      tags:
        - VYALYNK
        - TRANSACTIONS
      responses:
        '200':
          description: OK
      description: Send Transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Transaction-Card-Sale.yaml
            examples: {}
          application/xml:
            schema:
              $ref: ../models/Transaction-Card-Sale.yaml
        description: ''
      x-internal: false
  /recurring:
    get:
      description: Use this endpoint to fetch a recurring id
      summary: Your GET endpoint
      tags:
        - TRANSACTIONS
        - VYALYNK
      responses:
        '200':
          description: OK
      operationId: get-recurring
  '/card/transaction/proof_of_service/{pofs_id}':
    parameters:
      - schema:
          type: string
          example: pofs-349872392
        name: pofs_id
        in: path
        description: Proof of Service id.  Starts with `pofs`
        required: true
    get:
      summary: Fetch Proof of Service by ID
      tags:
        - TRANSACTIONS
        - VYALYNK
      responses:
        '200':
          description: OK
      operationId: get-card-transaction-proof_of_service-id
      description: Use this endpoint to fetch a Proof of Service by `pofs_id`
      parameters: []
    delete:
      summary: Delete a Proof of Service
      operationId: delete-card-transaction-proof_of_service-pofs_id
      description: Use this endpoint to Delete a Proof of Service
      tags:
        - TRANSACTIONS
        - VYALYNK
      responses:
        '200':
          description: OK
  /card/transaction/proof_of_service:
    post:
      summary: Create a Proof of Service
      tags:
        - TRANSACTIONS
        - VYALYNK
      responses:
        '200':
          description: OK
      operationId: post-card-transaction-proof_of_service
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Transaction-Proof-Of-Service.yaml
      description: Use this endpoint to create a Proof of Service
    get:
      summary: List Proof of Service
      tags:
        - TRANSACTIONS
        - VYALYNK
      responses:
        '200':
          description: OK
      operationId: get-card-transaction-proof_of_service
      description: Use this endpoint to query and list Proof of Service
      parameters:
        - schema:
            type: string
          in: query
          name: pofs_id
          description: The Proof of Service unique identifier. Begins with `pofs-`
        - schema:
            type: string
          in: query
          name: trxn_id
          description: 'The unique transaction identifier associated with the Proof of Service. Separate multiple trxn_id as a string with commas. Example: "98773837463622, 9837343243822"'
        - schema:
            type: string
            enum:
              - '1'
              - '2'
              - '3'
              - '4'
              - '5'
          in: query
          name: shipper
          description: |-
            Query Proof of Service by shipper. Values are 
              * `1` USPS
              * `2` FedEx 
              * `3` UPS 
              * `4` DHL
              * `5` Other
        - schema:
            type: string
          in: query
          name: tracking_no
          description: The shipper tracking number for the Proof of Service
        - schema:
            type: string
          in: query
          name: delivery_date
          description: The actual or expected delivery date associated with the Proof of Service. Format date as `YYYY-MM-DD`.
    put:
      summary: Update a Proof of Service
      operationId: put-card-transaction-proof_of_service
      tags:
        - VYALYNK
        - TRANSACTIONS
      responses:
        '200':
          description: OK
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: ../models/Transaction-Proof-Of-Service-Put.yaml
          application/xml:
            schema:
              type: object
              properties:
                '':
                  type: string
      description: Use this endpoint to update a Proof of Service
  /billing/recurring/templates:
    get:
      summary: List Templates
      tags:
        - BILLING
      responses:
        '200':
          description: OK
      operationId: get-billing-recurring-templates
      description: List merchant templates.  Filter results with query parameters
    post:
      summary: Create a Template
      tags:
        - BILLING
      responses:
        '200':
          description: OK
      operationId: post-billing-recurring-templates
      description: Create a new template
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Billing-Recurring-Template.yaml
  '/recurring/billing/templates/{template_id}':
    parameters:
      - schema:
          type: string
        name: template_id
        in: path
        required: true
        description: The recurring plan system identifier (starts with `template-`)
    get:
      summary: Fetch Template by system ID
      tags:
        - BILLING
      responses:
        '200':
          description: OK
      operationId: get-recurring-billing-templates-template_id
      description: Fetch recurring template by system ID
    patch:
      summary: Patch Template
      tags:
        - BILLING
      responses:
        '200':
          description: OK
      operationId: patch-recurring-billing-templates-template_id
      description: Patch recurring template
    delete:
      summary: Delete Template
      tags:
        - BILLING
      responses:
        '200':
          description: OK
      operationId: delete-recurring-billing-templates-template_id
      description: Delete recurring template
tags:
  - name: TRANSACTIONS
  - name: BILLING
  - name: VYALYNK
